name: Test the Docker image user

inputs:
  application-repository:
    required: true
    type: string
  service:
    required: true
    type: string
  image:
    required: true
    type: string
  image-tag:
    required: true
    type: string
  expected-user:
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.application-repository }}
        path: ${{ inputs.application-repository }}
    - name: Start application
      run: |
        cd ${{ inputs.application-repository }}
        yq '(.services.${{ inputs.service }}.build.args.IMAGE|="ghcr.io/${{ github.repository_owner }}/${{ inputs.image }}")' docker-compose.yml > tmp.$$.yml && mv tmp.$$.yml docker-compose.yml
        yq '(.services.${{ inputs.service }}.build.args.IMAGE_TAG|="${{ inputs.image-tag }}")' docker-compose.yml > tmp.$$.yml && mv tmp.$$.yml docker-compose.yml
        yq 'del(.services.${{ inputs.service }}.volumes)' docker-compose.yml > tmp.$$.yml && mv tmp.$$.yml docker-compose.yml
        PORT=$(yq '(.services.${{ inputs.service }}.ports)' docker-compose.yml | sed -e 's/^\- \(.*\)\:.*$/\1/')
        echo "PORT=$PORT" >> "$GITHUB_ENV"
        docker compose up ${{ inputs.service }} -d
      shell: bash
    - name: Check healthcheck endpoint
      run: for c in {1..30}; do sleep 1 && curl -s -w '%{http_code}' -o /dev/null http://localhost:${{ env.PORT }}/healthcheck/live/ | grep -o "200" && break; done
      shell: bash
    - name: Check user
      run: |
        cd ${{ inputs.application-repository }}
        docker compose exec ${{ inputs.service }} whoami | grep "${{ inputs.expected-user }}"
      shell: bash
