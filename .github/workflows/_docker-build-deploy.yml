name: Docker build

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      docker-context:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      base-image:
        required: false
        type: string
      user-image:
        required: false
        type: string
        default: appuser
      publish:
        required: true
        type: boolean
      ignore-linting-rules:
        required: false
        type: string

jobs:
  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      security-events: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ inputs.docker-context }}/${{ inputs.dockerfile }}
        ignore: SC1091,${{ inputs.ignore-linting-rules }}
    - name: ShellCheck
      run: |
        cd ${{ inputs.docker-context }}
        [ -d "./bin" ] && shellcheck --external-sources --exclude=SC1091 ./bin/*
        shellcheck --external-sources --exclude=SC2148 ./Dockerfile
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
    - name: Prepare image tag
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        echo "IMAGE_ID=$IMAGE_ID" >> "$GITHUB_ENV"
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name and add the commit count as a build number
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        [ "$VERSION" == "main" ] && VERSION=preview
        echo "TAG=$VERSION" >> "$GITHUB_ENV"
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push images
      uses: docker/build-push-action@v5
      with:
        context: ${{ inputs.docker-context }}
        platforms: linux/amd64,linux/arm64
        labels: |
          runnumber=${{ github.run_id }}
        build-args: |
          BASE_IMAGE=${{ inputs.base-image }}
          BASE_IMAGE_TAG=${{ env.TAG }}
          TNA_DOCKER_IMAGE_VERSION=${{ env.TAG }}
          TNA_DOCKER_IMAGE_SOURCE=${{ github.server_url	}}/${{ github.repository }}/blob/main/${{ inputs.docker-context }}/${{ inputs.dockerfile }}
          USER_IMAGE=${{ inputs.user-image }}
        push: ${{ inputs.publish }}
        tags: ${{ env.IMAGE_ID }}:${{ env.TAG }}
        provenance: false
    - name: List manifest
      if: inputs.publish
      run: docker buildx imagetools inspect ${{ env.IMAGE_ID }}:${{ env.TAG }}
    - name: Tag latest
      if: inputs.publish && startsWith(github.ref, 'refs/tags/')
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.docker-context }}
        platforms: linux/amd64,linux/arm64
        labels: |
          runnumber=${{ github.run_id }}
        build-args: |
          BASE_IMAGE=${{ inputs.base-image }}
          BASE_IMAGE_TAG=latest
          TNA_DOCKER_IMAGE_VERSION=${{ env.TAG }}
          TNA_DOCKER_IMAGE_SOURCE=${{ github.server_url	}}/${{ github.repository }}/blob/main/${{ inputs.docker-context }}/${{ inputs.dockerfile }}
          USER_IMAGE=${{ inputs.user-image }}
        push: true
        tags: ${{ env.IMAGE_ID }}:latest
        provenance: false
    - name: Scan for vulnerabilities
      if: inputs.publish
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_ID }}:${{ env.TAG }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH,MEDIUM'
    - name: Upload Trivy scan results to GitHub Security tab
      if: inputs.publish
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
