name: Docker build
on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      docker-context:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
jobs:
  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      security-events: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ inputs.docker-context }}/${{ inputs.dockerfile }}
        ignore: DL3007
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build image
      run: docker build --tag ${{ inputs.image-name }} --label "runnumber=${GITHUB_RUN_ID}" --platform=linux/amd64 ${{ inputs.docker-context }}
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
    - name: Prepare image tag
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository }}/${{ inputs.image-name }}
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        echo "IMAGE_ID=$IMAGE_ID" >> "$GITHUB_ENV"
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
    - name: Push image
      run: |
        docker tag ${{ inputs.image-name }} ${{ env.IMAGE_ID }}:${{ env.VERSION }}
        docker push ${{ env.IMAGE_ID }}:${{ env.VERSION }}
    - name: Scan for vulnerabilities
      id: scan
      uses: crazy-max/ghaction-container-scan@v2
      with:
        image: ${{ env.IMAGE_ID }}:${{ env.VERSION }}
        dockerfile: ${{ inputs.docker-context }}/${{ inputs.dockerfile }}
        # severity_threshold: HIGH
        annotations: true
    - name: Upload SARIF file
      if: ${{ steps.scan.outputs.sarif != '' }}
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
    - name: Push latest image
      run: |
        docker tag ${{ inputs.image-name }} $IMAGE_ID:latest
        docker push $IMAGE_ID:latest
