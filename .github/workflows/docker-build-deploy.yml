name: Docker build

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      docker-context:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      publish:
        required: true
        type: boolean

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  # lint:
  #   uses: ./.github/workflows/lint.yml
  #   with:
  #     image-name: ${{ inputs.image-name }}
  #     docker-context: ${{ inputs.docker-context }}
  #     dockerfile: ${{ inputs.dockerfile }}

  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    # needs: lint
    permissions:
      packages: write
      contents: read
      security-events: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
    - name: Prepare image tag
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ inputs.image-name }}
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        echo "IMAGE_ID=$IMAGE_ID" >> "$GITHUB_ENV"
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name and add the commit count as a build number
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        echo "VERSION=$VERSION" >> "$GITHUB_ENV"
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        platforms: linux/amd64,linux/arm64
    - name: Build images
      if: inputs.publish != true
      run: |
        OUTPUT=${{ inputs.publish && 'registry' || 'local' }}
        docker buildx build --output=type=$OUTPUT --tag ${{ env.IMAGE_ID }}:${{ env.VERSION }} --platform linux/amd64,linux/arm64 --label "runnumber=${GITHUB_RUN_ID}" --build-arg="TNA_DOCKER_IMAGE_VERSION=$VERSION" --build-arg="TNA_DOCKER_IMAGE_SOURCE=${{ github.server_url	}}/${{ github.repository }}/blob/main/${{ inputs.docker-context }}/${{ inputs.dockerfile }}" ${{ inputs.docker-context }}
    - name: Tag latest
      if: inputs.publish && startsWith(github.ref, 'refs/tags/')
      run: docker buildx imagetools create --tag ${{ env.IMAGE_ID }}:latest ${{ env.IMAGE_ID }}:${{ env.VERSION }}
    - name: List images
      run: docker buildx ls
    - name: Scan for vulnerabilities
      id: scan
      uses: crazy-max/ghaction-container-scan@v2
      with:
        image: ${{ env.IMAGE_ID }}:${{ env.VERSION }}
        dockerfile: ${{ inputs.docker-context }}/${{ inputs.dockerfile }}
        severity_threshold: CRITICAL
        annotations: true
    - name: Upload SARIF file
      if: steps.scan.outputs.sarif != '' && inputs.publish
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
