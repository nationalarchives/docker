name: Docker build
on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      docker-context:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
jobs:
  build:
    name: Build and deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ inputs.docker-context }}/${{ inputs.dockerfile }}
        ignore: DL3007
    - name: Checkout
      uses: actions/checkout@v3
    - name: Build image
      run: docker build --tag ${{ inputs.image-name }} --label "runnumber=${GITHUB_RUN_ID}" --platform=linux/amd64 ${{ inputs.docker-context }}
    - name: Log in to registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
    - name: Push image
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository }}/${{ inputs.image-name }}
        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag ${{ inputs.image-name }} $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
    - name: Sanitise Docker image name
      uses: actions/github-script@v6
      id: docker_image
      env:
        IMAGE_ID: $IMAGE_ID
        VERSION: $VERSION
      with:
        script: |
          const { IMAGE_ID, VERSION } = process.env
          return `${IMAGE_ID}:${VERSION}`
    - name: Scan for vulnerabilities
      uses: crazy-max/ghaction-container-scan@v2
      with:
        image: ${{ steps.docker_image.outputs.result }}
        dockerfile: ${{ inputs.docker-context }}/${{ inputs.dockerfile }}
        annotations: true
    - name: Push latest image
      run: |
        docker tag ${{ inputs.image-name }} $IMAGE_ID:latest
        docker push $IMAGE_ID:latest
