name: Clean up feature branches

on:
  delete:

jobs:
  delete:
    if: github.event.ref_type == 'branch' && startsWith(github.event.ref, 'feature/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image-name: [tna-python, tna-python-django]
    steps:
      - name: Prepare image tag
        run: |
          IMAGE_ID=${{ matrix.image-name }}
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "IMAGE_ID=$IMAGE_ID" >> "$GITHUB_ENV"
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.event.ref }}" | sed -e 's,.*/\(.*\),\1,')
          echo "TAG=$VERSION" >> "$GITHUB_ENV"
      - name: Output image tag
        run: echo "Clean up Docker image ${{ env.IMAGE_ID }}:${{ env.TAG }}"
      - name: Delete image
        uses: bots-house/ghcr-delete-image-action@v1.1.0
        with:
          owner: ${{ github.repository_owner }}
          name: ${{ env.IMAGE_ID }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.TAG }}

  remove-untaqged:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image-name: [tna-python, tna-python-django]
    env:
      PER_PAGE: 100
    steps:
      - name: Delete untagged images
        uses: actions/github-script@v6.3.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.request("GET /${{ github.repository_owner }}/packages/container/${{ matrix.image-name }}/versions",
              { per_page: ${{ env.PER_PAGE }}
            });
            for(version of response.data) {
                if (version.metadata.container.tags.length == 0) {
                    console.log("delete " + version.id)

                    const deleteResponse = await github.request("DELETE /${{ github.repository_owner }}/packages/container/${{ matrix.image-name }}/versions/" + version.id, { });
                    console.log("status " + deleteResponse.status)
                }
            }
