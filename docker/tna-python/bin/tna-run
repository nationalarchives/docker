#!/bin/bash

set -e

# Set flag defaults
ASYNC=false

# Parse flags
while getopts ":a" option; do
  case "${option}" in
    a)
      ASYNC=true
      shift 1
      ;;
    ?)
      echo "Invalid option: -${OPTARG}"
      exit 1
      ;;
  esac
done

# Get the application
APPLICATION=$1

# Error if no application is passed
if [ -z "$APPLICATION" ]
then
  echo -e "Error: application not specified in tna-run\n";
  echo "PARAMETERS"
  echo "  application          the Python package you want to run"
  echo "                       Example: tna-run my_app:app";
  exit 1
fi

# Add support for the older ENVIRONMENT variable
if [ "$ENVIRONMENT" != 'production' ]
then
  RUNTIME=$ENVIRONMENT
fi

# Convert $RUNTIME to lowercase
RUNTIME=$(echo "$RUNTIME" | tr '[:upper:]' '[:lower:]')

# If there is an $NPM_DEVELOP_COMMAND and we are running a development environment, run the development command now
if [ "$RUNTIME" == 'develop' ] && [ -n "$NPM_DEVELOP_COMMAND" ]
then
  tna-node "$NPM_DEVELOP_COMMAND"
fi

# Set up the default number of workers and threads
DEFAULT_WORKERS=$(python -c "import multiprocessing; print(multiprocessing.cpu_count() * 2 + 1)")
DEFAULT_THREADS=$((DEFAULT_WORKERS * 2))

# Set the worker class
[[ "$ASYNC" = true ]] && WORKER_CLASS=uvicorn_worker.UvicornWorker || WORKER_CLASS=sync

# Use the number of workers and threads (if provided) else use defaults
[[ -z $WORKERS ]] && WORKERS=$DEFAULT_WORKERS
[[ -z $THREADS ]] && THREADS=$DEFAULT_THREADS

# Set the port to 8080 if one is not defined
[[ -z $PORT ]] && PORT=8080

if [ "$RUNTIME" == 'develop' ]
then
  # Development environment
  echo "RUNTIME is develop"
  [[ -z $LOG_LEVEL ]] && LOG_LEVEL=debug
  [[ -z $WORKERS ]] && WORKERS=3
  [[ -z $THREADS ]] && THREADS=1
  [[ -z $TIMEOUT ]] && TIMEOUT=600
  [[ -z $KEEP_ALIVE ]] && KEEP_ALIVE=5

  # Try using the Django development server if the application uses Django
  echo "Trying Django development server..."
  if poetry show django ;
  then
    echo "Django found, starting server"
    poetry run python /app/manage.py runserver "0.0.0.0:$PORT"
  fi
  echo "Django not found"

  # Try using the Flask development server if the application uses Flask
  echo "Trying Flask development server..."
  if poetry show flask ;
  then
    echo "Flask found, starting server"
    poetry run flask --app "$APPLICATION" run --debug --host 0.0.0.0 --port "$PORT"
  fi
  echo "Flask not found"

  # Use a uvicorn server if the application uses FastAPI
  echo "Trying FastAPI server..."
  if poetry show fastapi ;
  then
    echo "FastAPI found, starting server"
    poetry run uvicorn "$APPLICATION" --workers "$WORKERS" --log-level "$LOG_LEVEL" --timeout-keep-alive "$KEEP_ALIVE" --host 0.0.0.0 --port "$PORT" --reload
  fi
  echo "FastAPI not found"

  # Fall back to using Gunicorn
  echo "No framework found, using Gunicorn to serve development application..."
  poetry run gunicorn "$APPLICATION" --workers "$WORKERS" --threads "$THREADS" --log-level "$LOG_LEVEL" --timeout "$TIMEOUT" --keep-alive "$KEEP_ALIVE" --bind "0.0.0.0:$PORT" --worker-class="$WORKER_CLASS" --reload
elif [ "$RUNTIME" == 'production' ]
then
  # Production environment
  [[ -z $LOG_LEVEL ]] && LOG_LEVEL=warn
  [[ -z $TIMEOUT ]] && TIMEOUT=30
  [[ -z $KEEP_ALIVE ]] && KEEP_ALIVE=30
else
  # All other environments
  [[ -z $LOG_LEVEL ]] && LOG_LEVEL=info
  [[ -z $TIMEOUT ]] && TIMEOUT=30
  [[ -z $KEEP_ALIVE ]] && KEEP_ALIVE=5
fi

[[ -z $ALLOW_INSECURE ]] && ALLOW_INSECURE='false'

if [ "$ALLOW_INSECURE" = 'true' ]
then
  # Start the server
  echo "Starting $RUNTIME server (insecure)..."
  poetry run gunicorn "$APPLICATION" --workers "$WORKERS" --threads "$THREADS" --log-level "$LOG_LEVEL" --timeout "$TIMEOUT" --keep-alive "$KEEP_ALIVE" --access-logfile - --bind "0.0.0.0:$PORT" --worker-class="$WORKER_CLASS"
else
  [[ -z $SSL_KEY_FILE ]] && SSL_KEY_FILE=/home/app/ssl/key.pem
  [[ -z $SSL_CERTIFICATE_FILE ]] && SSL_CERTIFICATE_FILE=/home/app/ssl/cert.pem

  # Check for SSL certificates
  if [ ! -f "$SSL_KEY_FILE" ]
  then
    echo "$SSL_KEY_FILE does not exist";
    exit 1
  fi
  if [ ! -f "$SSL_CERTIFICATE_FILE" ]
  then
    echo "$SSL_CERTIFICATE_FILE does not exist";
    exit 1
  fi

  # Start the server
  echo "Starting $RUNTIME server..."
  poetry run gunicorn "$APPLICATION" --workers "$WORKERS" --threads "$THREADS" --log-level "$LOG_LEVEL" --timeout "$TIMEOUT" --keep-alive "$KEEP_ALIVE" --access-logfile - --bind "0.0.0.0:$PORT" --worker-class="$WORKER_CLASS" --keyfile="$SSL_KEY_FILE" --certfile="$SSL_CERTIFICATE_FILE"
fi
